## 국비교육 일차


#### 리눅스 실행법

> ```
> winscp -> 프라이빗 키 생성&저장
> tera term -> ip 192.168.9.99 사용
> winscp에서 만든 프라이빗 키 연동
> ** 
> 혹시 tera term에서 연동이 안되면 vm을 끄고 리눅스 - cmd로 들어가 vagrant up 을 한 후, tera term 다시 실행 
> ```
>  

#### 리눅스의 구조 

> ```
> 리눅스는 유닉스 계열의 운영체제, 유닉스에서는 시스템과 관련된 정보와 하드웨어 같은 장치를 모두 파일로 관리함. 
> 리눅스는 파일을 효율적으로 관리하기 위해 계층구조의 directory를 사용.
> 이렇게 용도에 따라 계층 directory로 구분해 관리하는 것을 file system이라고 함
> ```


#### 리눅스의 파일의 종류

> ```
> 일반 파일
>   일반 파일은 데이터를 저장하는 데 주로 사용. 각종 txt, exe, img 파일 등 리눅스에서 사용하는 대부분의 파일이 해당 됨. exe와 img의 경우 데이터가 바이너리 형태로 저장되어 바이너리 파일이라고도 함
> 
> 디렉토리(directory)
>   리눅스에서는 directory도 file로 취급한다. directroy file에는 해당 directory에서 저장된 파일이나 하위 directory에 대한 정보가 저장됨
> 
> 심벌릭 링크(=window의 바로가기)
>   심벌릭 링크는 원본 파일을 대신하도록 원본 파일을 다른 파일명으로 지정한 것
>
> 장치파일
>   리눅스에서는 하드디스크나 마우스같은 장치들도 파일로 취급한다. 장치파일은 해당 장치들을 관리하기 위한 파일로, 장치를 관리하기 위해선 시스템 관리자가 해당 장치파일에 접근해야 한다. 장치파일은 보통 /dev directory 아래에 위치한다. 
> ```

![Alt text](/linux_directory.png)

#### 리눅스의 directory 구조

> ```
> 리눅스는 트리형 구조, 그래서 경로를 정확히 아는 것이 중요함!
>   cf. 트리형 구조란? 디렉토리 밑에 디렉토리..그밑에 디렉토리..
> ```

#### 리눅스 생성 및 수정 커맨드 

> ```
>
> mkdir [directory_name] : [directory_name]이름의 폴더 생성
>
> - - -
>
> touch [file_name] : 파일 작성
>   ex) cd TEST_D3 && touch sample
>   cf) vi [file_name] : 내용을 입력하면서 작성
>
> - - - 
>
>  i : 수정 ( 나가는 법 : esc + ':wq!')
>
> - - - 

#### 리눅스 이동 및 조회 커맨드

> ``` 
> cd [이동 할 directory path]
>   ex) cd / : root로 이동
>   ex) cd ~ : 해당 유저의 최상위 경로로 이동
>   ex) cd [directory_name] : 현재 directory 내부에 있는 [directory_name]으로 이동
>   ex) cd /home/vagrant : /home/vagrant 경로로 이동
>       cf) 이동할 directory 경로 인자 값에는 절대 경로 뿐만 아니라, 상대 경로를 통해 상위 폴더 or 하위 폴더로 이동할 수 있다. 
>          
>           *** 절대 경로란? 
>               1. path를 시작(root)부터 끝까지 다 입력한 것을 말함
>               2. 절대 경로를 통해 이동할 때는 현재 위치에 상관없이 똑같은 명령어로 입력하여 이동
>                   cf) pwd 명령어를 통해 현재 자신이 위치한 절대 경로를 파악할 수 있음   
>               ex) /home/vagrant/TEST
>           
>           *** 상대 경로란? 
>               1. 현재 자신이 있는 위치를 기준으로 이동하는 방법
>               2. 이 때 자신이 있는 위치는 . 으로 표기한다. 
>               ex) root 밑에 /a/b/c/d 가 있을 경우 b에서 d로 이동하려면 cd ./c/d/
>               ex) 다시 d에서 b로 이동하려면 cd ../../
>               ex) 만일 root 밑에 a와 q가 있고 /q/w/e/r/ 로 진행될 때 b directory에서 r로 이동할 때 cd ../../q/w/e/r/
>               => 해설
>                   1. a로 이동 -> ..
>                   2. /(root)로 이동 -> ..
>                   3. q로 이동 -> /q
>                   4. w로 이동 -> /w
>                   5. e로 이동 -> /e
>                   6. r로 이동 -> /r
>                       cf) 이 때 마지막의 / 는 입력해도 되고 안해도 되지만 directory임을 확실히 나타내기 위해서 편의상 입력
>                       cf2) 만약 현재 위치가 b라고 가정할 때 ./은 /a/b를 의미하지만 /a/b는 root를 의미하게 된다. 
>                           디렉토리 이동 시엔 큰 상관이 없지만 삭제나 파일을 이동시킬 때 작은 실수가 돌이킬 수 없는 결과를 낳을 수 있다. 
>                           현재 경로 파일을 삭제하려다 취상위 경로 파일 모두를 날릴 수 있으므로 조심할 것 
>                   * 옵션의 종류
>                   1. cd .. : 상위 디렉토리로 이동
>                   2. cd .  : 현재 위치한 폴더로 이동(=새로고침 기능)
>                   3. cd -  : 이전에 위치했던 폴더로 이동(=윈도우의 뒤로가기)
>                   4. cd /  : root directory로 이동
>                   5. cd ~  : home directory로 이동(=최상위 경로)
>   cf) cd ../ : 한 directory 위로 가기
> 
> - - -
>
> ls [directory_name] 
>   : 디렉토리에 있는 내용을 확인
>   ex) ls / : root에 있는 파일 목록 출력 
>   ex) ls /vagrant : /vagrant 경로의 directory에 있는 파일 목록 출력
>       ** 주의사항
>           1. 디렉토리를 지정하면 파일 목록을 출력할 수도 있음
>           2. 옵션을 사용하지 않으면 숨김 파일은 나오지 않음
>           3. 디렉토리명을 생략하면 현재 위치한 디렉토리의 파일 목록을 출력
>   -l : 파일들을 자세히 출력
>   -a : 경로 안의 모든 파일을 나열
>   -R : 위치한 디렉토리의 하부 디렉토리 파일까지 모두 출력 
>   -r : 출력결과를 내림차순으로 정렬
>   -h : 파일 크기를 해석하기 편하게 출력
>   -t : 출력 결과를 파일이 수정된 시간 기준으로 정렬
>
> - - - 
>
> cat : 파일의 내용을 보여줌
>   ex) cat a1 : a1 파일의 내용보기
>   cf) vi : 편집기(내용 출력+수정)
> tac : 파일의 내용을 역순으로 보여줌
> 
> - - - 
>
> ll : 목록리스트 (조회)
>   > : 파일이 존재하면 덮어쓴다.(파일작성)
>   >> : 파일의 끝에 추가한다. (파일작성)
>   -n : 행 번호 붙이기 (넘버링)
>   ln : 행 보이게 해줌 (-w / -i/ -v 옵션 선택 가능) (넘버링)
>
> - - - 
> 
> history : 이력 확인
> 
> - - - 
>
> pwd : 경로 확인
>
> - - -
>
> tab: 사용가능한 데이터 미리보기
>
> - - - 
>
> ctl + l : 화면 비우기 기능
>
> - - -
>
> who : 접속자를 보여줌
>   - 리눅스는 파생 분파가 많아서 줄기마다 명령어는 다를 수 있음 
>   - 모든 사용자가 작성한 명령어를 확인할 수 있음
>
> - - - 
>
> cal : 달력 호출
>
> ```


#### 파일 관련 명령어


> ```
> mv : 파일 이동 
>   ex) mv: 이동하겠다 b2: b2를 mbTest/b3 어떤위치에
> 
> - - - 
> 
> cp : copy(복사)
>   -r: 아래 것까지 복사하라는 옵션
>   ex) cp -r test/ test2 
>
> - -  -
>
> head : 파일의 상단부분 보기
>   ex) head -n5 A1: A1 파일의 내용을 앞에서부터 5개 행만큼 보여줘
> tail : 파일의 하단부분 보기
>   ex) tail -n5 A1: A1 파일의 내용을 뒤에서부터 5개 행만큼 보여줘
>
> - - - 
> 
> split : 파일을 분할
>   - b옵션: 바이트 기준 자르기
>   - c옵션: 행 기준 자르기 
>   - d옵션: d+숫자, 일련번호
>   ex) split -C5000 -d  --additional-suffix=.java K backup_
> 
> - - - 
>
> wc : 파일의 행 수 확인
> 
> - - -
>
> 저장 : ctrl + d
> rm : 파일이나 디렉토리를 삭제할 때 사용 ( -r(하위까지) / -f 옵션 선택 가능) (삭제)
>   cf) (=rmdir) (디렉토리 삭제) 
>   ex) rm -rf test : 현재 경로 밑의 test란 디렉토리 삭제
>   ex) rm -rf *.txt : .txt로 끝나는 모든 파일 삭제
> * : 와일드카드 
>   ex) *.txt 등으로 응용 가능
> - - - 
> 


#### 리눅스 권한 관련 명령어


> ```
> sudo su - : 권한을 root로 변환 
>   - exit으로 로그아웃
>   - su [유저명] :[유저명]으로 로그인
>       - ex) hansol에서 root로 넘어가고 싶을 시, hansol을 로그아웃 하고 진행해야 함. hansol에서 su를 쳐도 권한이 없어서 진행되지 않기 때문
>   - sudo passwd로 비밀번호 지정
>
> - - - 
>
> useradd [hansol] : [hansol] 유저 생성 
>   생성된 유저는 cd/home/ 에 hansol로 디렉토리 생성
>
> - - - 
>
> passwd [hansol] : [hansol] 유저의 비밀번호 생성 및 변경
>
> - - - 
>
> userdel [hansol]: [hansol] 삭제
>   -rf : 유저 하위 디렉토리 까지 다 지워주세요
>   ** 유저를 생성하면 유저는 자동적으로 그룹이 할당됨. 그룹은 유저들을 큰 항목에서 관리하기 위한 집합
>
> - - - 
>
> su - [hansol] : root 에서 [hansol]로 접속 
>   -rwxrxwrxw. (RWX) 
>   * read (4) write(2) x(1)실행 = 7
>   * 3개씩 묶어서 권한을 표기 (소유자 / 그룹 / 제3자 )
>   ex) d-rw-rw-r-- : 소유자와 그룹은 읽고 쓸 수 있고, 제 3자는 읽기만 가능 
>       cf) d- : directory 
>
> - - - 
>
> chmod 644 [파일명 / 디렉토리명]: hansol의 권한을 644로 변경 (권한 변경)
>   * 이때 root가 아니라고 해도 자기 자신의 권한은 얼마든지 바꿀 수 있다.
>
> ```


### 리눅스 그룹관련 명령어


> ```
> tail/etc/group : etc 밑에 group 의 파일을 뒷부분 보기
>   => 보통 그룹 작업한 내용을 확인할 때 사용한다. 새로 추가되면 뒤에 자리하기 때문에 tail을 사용하면 확인하기 쉽다.
>
> - - - 
>
> groupadd : 그룹추가
>   ex) groupadd teamA : teamA 생성 
>   ex) useradd -g teamC devlop01
>
> - - - 
>
> groupmod : 그룹에 대한 다양한 명령 수행
>   -g : 그룹아이디 변경
>       ex) groupmod -g 3000 teamB // 팀B의 그룹아이디를 3000으로 수정
>   -n : 그룹이름을 수정
>       ex) gruop -n teamC teamB // 팀B를 팀C로 수정
>
> - - - 
> 
> groupdel teamA : teamA의 그룹 삭제
>
> - - - 
> 
> gpassword [그룹명] : [그룹명]의 비밀번호를 변경
>   ex)gpassword -r teamA : teamA의 비밀번호를 삭제 
>   ex)gpasswd -A develop01 teamC : develop01을 teamC의 관리자(-A)로 설정하고, 해당 id의 그룹 비밀번호 지정(-a 유저명 그룹명 그룹에 유저 추가) 
>
> - - - 
>
> groups 지금 접속해있는 유저들의 그룹 확인
>
> - - - 
>
> grep teamC /etc/gshadow : 그룹 비밀번호가 암호화되서 저장되어있는것을 확인
>
> - - - 
>
> vi /etc/passwd (비밀번호가 저장되어있는 주소(path) 노출)
>
> - - - 
>
> chown : 소유자를 변경시킴 
>   ex) chown vagrant(그룹):vagrant(소유자)
>
> ```


#### 리눅스 찾기 참조 명령어 


> ```
> find
>   -name : (파일 이름이 뭔지)
>   -user : (소유주가 누구인지)
>   -perm [int]: 권한이 [int]인 대상을 찾아줘
>   -type [d/f]: 타입 확인
>   -size [int]: 양수일 때 +
>   ex) find -name sample -type f
>   ex) sudo find /etc/ -name "*.conf"
>
> - - - 
>  
> grep ["찾을 문자열"] 경로 : 
>   cf) find -name "sample" -type f, grep -nv "jeju" /home/vagrant/grepTEST/sample
>   -A[number] : 찾을 문자열 행 뒤의 [number] 줄 만큼 출력
>   -B[number] : 찾을 문자열 행 앞의 [number] 줄 만큼 출력
>   -r : 하위 디렉토리를 포함한 모든 파일에서 검색(중요!)
>   -n : 포함된 행의 번호를 함께 출력
>   -v : 일치하지 않는 행만 출력
>   -E : 찾을 패턴을 정규 표현식으로 찾음
>   -i : 대소문자를 구별하지 않음
>   -l : 패턴이 포함된 파일의 이름을 출력
>   cf) find /home/ -name services | grep -nr -B10 "file"
>
> [order1] | [order2] : [order1] 이 끝나고 나서 순차적으로 [order2] 진행 
>   cf) [order1] && [order2] : [order1]과 [order2] 동시 진행
>
> touch [file_name] : 파일 작성
>   ex) cd TEST_D3 && touch sample
>   cf) vi [file_name] : 내용을 입력하면서 작성
> ```

#### 리눅스 사용 팁
> ``` 
> ll과 cat으로 항상 확인하는 습관!
> history를 적극 사용해서 로그를 볼 것
> 잘 못 써서 명령 창 못 가면 ctl + c
>
> sudo ~ : root 의 권한을 빌려서 ~ 
> 테라텀은 마우스 우클릭으로 복사/붙여체 넣기 가능
> --help : 옵션 확인 
>
## 국비교육 84일차

#### 리눅스 찾기참조 명령어

> ```
> find
>   -name : (파일 이름이 뭔지)
>   -user : (소유주가 누구인지)
>   -perm [int]: 권한이 [int]인 대상을 찾아줘
>   -type [d/f]: 타입 확인
>   -size [int]: 양수일 때 +
>   ex) find -name sample -type f
>   ex) sudo find /etc/ -name "*.conf"
>
> - - - 
>
> grep ["찾을 문자열"] 경로 : 
>   cf) find -name "sample" -type f, grep -nv "jeju" /home/vagrant/grepTEST/sample
>   -A[number] : 찾을 문자열 행 뒤의 [number] 줄 만큼 출력
>   -B[number] : 찾을 문자열 행 앞의 [number] 줄 만큼 출력
>   -r : 하위 디렉토리를 포함한 모든 파일에서 검색(중요!)
>   -n : 포함된 행의 번호를 함께 출력
>   -v : 일치하지 않는 행만 출력
>   -E : 찾을 패턴을 정규 표현식으로 찾음
>   -i : 대소문자를 구별하지 않음
>   -l : 패턴이 포함된 파일의 이름을 출력
>   cf) find /home/ -name services | grep -nr -B10 "file"
>
> - - - 
>
> [order1] | [order2] : [order1] 이 끝나고 나서 순차적으로 [order2] 진행 
>   cf) [order1] && [order2] : [order1]과 [order2] 동시 진행
>   [order] --help : 해당 명령에 할당된 옵션에 대한 설명을 제공
>
> ```


#### 압축 / 해제 관련 명령어


> ```
> gzip [option] [file_name] [file_name2] ... : 사진이나 용량큰거, 기존에 있는 파일이 없어지고 압축파일이 새로 생성
>   -d : 압축해제
>       ex) gzip -d ./f* : f로 시작하는 파일 전체 해제 
>   -n : 1~9, 1이 가장 빠르지만 압축률이 낮다
>   -c : 압축된 파일 내용을 출력하고 원본파일은 그대로
>   -f : 사용 중인 파일도 강제로 압축
>   -l : 압축된 파일의 정보 출력
>   -t : 압축 파일 테스트 (압축이 풀리진 않음)
>   -v : 압축 or 압축 해제 할 때 자세한 정보 출력
>   -h : 도움말 호출
>   -v : 버전 정보 출력
>
> - - - 
>
> bzip2 [option] [file_name]
>
> - - - 
>
> xz [option] [file_name] 
>   * 자주사용하는 옵션
>   -k : 기존의 파일을 유지하면서 압축파일을 새로 생성
>   -l : 압축된 파일의 정보 출력
>
> - - - 
>
> zip [file_name] : 압축해제
>   ex) sudo yum install zip-y
> unzip [file_name]
>   ex) sudo yum install unzip-y
>
> ```


#### tar 명령어 정리


> ```
> tar
>   : tar는 Tape ARchiver의 약자로 엄밀히 말하면 압축방식은 아닌, 일종의 묶음(아카이브) 형태이다. tar파일은 리눅스 및 유닉스에서 가장 많이 사용되는 형태로 tar로 묶이기 전 file들의 속성과 directory 구조등을 모두 보존할 수 있고 압축과 압축 해제 등의 작업을 거치면서 파일이 변경 또는 훼손 될 염려가 없기 때문에 소스 배포 파일을 만드는 용도로 자주 사용한다. 
>   -f : 대상 tar 아카이브 지정.(기본 옵션)
>   -c : tar 아카이브 생성(압축). 기존 아카이브 덮어쓰기)
>   -x : tar 아카이브에서 파일 추출(압축 해제)
>   -v : 처리되는 과정(파일 정보)을 상세히 보여줌
>   -z : gzip 압축 적용 옵션
>   -j : bzip2 압축 적용 옵션
>   -k : tar 아카이브 추출 시(압축 시), 기존 파일 유지
>   -U : tar 아카이브 추출 전(압축 전), 기존 파일 삭제
>   -C : 대상 디렉토리 경로 지정
>   -w : 모든 진행 과정에 대한 확인 요청. (interactive)
>   -e : 첫 번째 에러 발생시 중지
>
> ```


#### tar 주요 사용법


> ```
> Q. 대상 directory를 포함한 모든 파일과 디렉토리를 tar로 묶기 
> A. tar -cvf test.tar [path]
> 
> Q. 파일을 지정하여 tar 아카이브로 묶기
> A. tar -cvf [file_name1] [file_name2]
>
> Q. tar 아카이브를 현재 directory에 풀기
> A. tar -xvf test.tar
>
> Q. tar 아카이브를 지정된 directory에 풀기
> A. tar -xvf test.tar -C [path]
>
> Q. tar 아카이브의 내용 확인하기 
> A. tar -tvf test.tar
>
> Q. gzip으로 압축된 tar 아카이브를 현재 directory에 풀기
> A. tar -zxvf test.tar.gz
>
> Q. bzip2로 압축된 tar 아카이브를 현재 directory에 풀기
> A. tar -jxvf test.tar.bz2 
>
> Q. 현재 directory를 tar로 묶고 gzip으로 압축하기 
> A. tar -zcvf test.tar.gz *
>
> Q. 현재 directory를 tar로 묶고 bzip2로 압축하기 
> A. tar -jcvf test.tar.bz2 *
>
> Q. tar 아카이브로 묶거나 풀 때 파일 별로 진행 여부 확인하기 
> A. tar -cvfw or -xvfw test.tar
>
> Q. 현재 directory의 모든 파일과 디렉토리를 [특정 이름]의 tar로 묶기 
> A. tar -cvf [name].tar*
>
> ```


#### rpm 명령어


> ```
> rpm
>  : red hat 계열의 리눅스에서 패키지를 설치하는 데 사용하는 명령
>   cf) red hat 계열이란? 리눅스의 세 분파 중 하나로, 배포판 중 가장 널리 알려진 계열이다. 레드햇 외로는 데비안 계열(대표작 : 우분투)과 SUSE계열(대표작 : 오픈 수세)가 있다. 
>   윈도우에서 .exe 확장자로 프로그램을 설치하듯이 마찬가지로 리눅스에서는 .rpm 확장자를 가진 설치 파일로 패키지를 설치한다.
>   yum은 rpm의 상위호환, 왜? rpm 패키지 간의 의존성을 주의하여야 하지만 yum은 자체적으로 해결해주기 때문
>       cf) rpm 예시 : a를 설치하기 위해선 b와 c가 필요한데, b를 설치하려면 다시 d와 e가 필요하고, e는 f를 필요로하고 ....... 
>   그렇다면 yum이 만능인가? 그렇진 않음, 버전이 업데이트 될 때마다 자동적으로 올라오지 않기 때문
>   -ivh [패키지명] : 이전 버전 삭제안하고 새로운 버전 설치
>   -Fvh [패키지명] : 패키지 업데이트 
>   -Uvh [패키지명] : 설치 및 업데이트(주로 사용)
>   --nodeps : 의존성 무시하고 설치 옵션
>   --force : 패키지 충돌이 발생해서 강제 설치 옵션
>
> 어떤 것을 설치하고 싶다면 http://mirror.centos.org/centos-7/7/os/x86_64/Packages/ 에 접속해서 필요한 패키지를 받을 수 있음
> 설치 방법 : wget [복사한 링크]
>
> ```


##### 기타 명령어
> ```
>
> seq : 배열 만들기 
>   ex) seq 100 100 1500
>   -> 100부터 시작해서 100씩 증가하는 배열을 만듬, 상한선 1500
>
> alias ll2='ls -Alh' 명령어 만드는 명령어 
> ```


#### 리눅스 연습이 필요한 cmd 모음 

> ```
> chgrp [그룹명] [폴더명] :
> ls 디렉토리 간략 보기
> ls -al : 전부 보이기 
> wc -l /etc/  파일 줄수 확인
> cp /etc/yum.conf yum.conf 복사 [파일명1] [파일명2] : [파일명1]을 [파일명2]로 복사
>   ex) cp services TEST_D1/service_COPY
mkdir 디렉토리 만들기
>   ex) cp hansol ../TEST_D1/hansol_COPY // 위로 올라갈 때는 반드시 "../" 자주 실수함! 
> ```


##### 실전문제

> ```
> Q1. DB라는 유저를 추가하고 비밀번호를 1234 로 변경하십시오.
> A: useradd DB, passwd DB, 1234
>
> Q2. DB라는 유저로 변경후 /home 으로 이동후 경로를 출력하십시오
> A: su DB, cd /home, pwd
>
> Q3. 최상위 위치로 돌아간뒤 /home/DB sample라는 폴더를 만들고 속성(권한)값을 rw-rw-r-- 으로 변경하시오.
> A: cd ~, mkdir /home/DB/sample, chmod 664 sample
>
> Q4. 그룹 naver 를 만들고  유저  developer1,developer2 를 추가하시오.
> A: groupadd naver, gpasswd -a developer1 naver, gpasswd -a developer2 naver
>
> Q5. developer1 유저로 속성(권한)값이 r--rw-r-x 인 test 폴더를 만들고(최상위 위치에) 그룹을 naver로 변경하시오.
> A: su develop1, mkdir test, chmod 465 test, sudo su -, cd /home/develop1, chown develop1:naver test or chgrp naver test
>
> Q6. 폴더를 지우고 싶은데 삭제가 안된다. 그이유는? (사용한 명령어는 rmdir 이였다.)
> A: 1. 폴더가 비어있지 않다, 2. 권한이 없다 -> rm-rf [폴더명] 
> 
> Q7. pwd 명령어를 실행하니 현재 위치가 ~ 였다 /home/DB/sample의 data 파일의 행번호를 붙여서 출력하는 명령어는?
> A: vi data, cat -n /home/DB/sample/data , wc -l /home/DB/sample/data
>
> Q8.현재 디렉터리에 있는 파일명의 확장자가 java인 모든파일을 /tmp로 복사하시오.
> A: cp *.java /tmp/
>
> ```


- - -

#### 기타 설치 방법


- - -
#### java 설치
> ```
> 1. yum install -y java-1.8.0-openjdk
> 2. yum install -y java-1.8.0-openjdk-devel
> 3. readlink -f /usr/bin/java
> 4. 3의 경로를 복사해서 입력
> 5. vi /etc/profile
> 6. 환경변수 설정(이미 입력된 게 있으면 지우고 다시)
>   6-1) JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.x86_64
> PATH=$PATH:$JAVA_HOME/bin
> CLASSPATH=$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar
> 
> export JAVA_HOME PATH CLASSPATH
> 7. source /etc/profile
> ``` 

#### tomcat 설치

> ```
> tomcat이란?
>   웹 어플리케이션 서버(WAS) (cf. apache : 웹 서버, 정적 자원(html)들을 할당받음), 동적 자원(java or db정보 등)을 컴파일하여 화면으로 전송
> 1. cd /usr/local/download 
> 2. 없으면 /usr/local 가서 mkdir download
> 3. http://archive.apache.org/dist/ 가서 tomcat - tomcat8 - 8.5.27 - bin - http://archive.apache.org/dist/tomcat/tomcat-8/v8.5.27/bin/apache-tomcat-8.5.27.tar.gz 링크 복사
> 4. 압축해제 tar -xvzf apache-tomcat-8.5.27.tar.gz
> 5. mv apache-tomcat-8.5.27 /usr/local/tomcat8
> 6. cd ../ 
> 7. cd tomcat8
> 8. vi conf/server.xml
> 9. 71 번째 행의 redirecPort="8443" 뒤에 URIEncoding="UTF-8" 추가
> 10. vi /etc/profile (톰캣의 환경변수 수정)
>   10-1) JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.342.b07-1.el7_9.x86_64
> CATALINA_HOME=/usr/local/tomcat8
>
> PATH=$PATH:$JAVA_HOME/bin:/bin:/sbin
> CLASSPATH=$JAVA_HOME/jre/lib:$JAVA_HOME/lib/tools.jar:$CATALINA_HOME/lib-jsp-api.jar:$CATALINA_HOME/lib/servlet-api.jar
>
> export JAVA_HOME PATH CLASSPATH CATALINA_HOME 으로 수정
>   10-2) 환경변수 추가할 때 : 를 사용 
> 11. 환경변수 적용 
>   11-1) source /etc/procfile
> 12. cd /usr/local/tomcat8/bin
> 13. tomcat 실행 
>   13-1) /usr/local/tomcat8/bin/startup.sh
> 14. ps -ef | grep tomcat8
> 15. yum install net-tools -y
> 16. netstat -tln 
> 17. wget http://localhost:8080/
> 18. Systmemctl 환경변수 등록
>   18-1)
> 19. systemctl daemon-reload
> 20. systemctl enable tomcat8
> 21. systemctl start httpd
> 22. systemctl start tomcat8
> 23. systemctl status tomcat8
> 24. HTTP에 HOST주소와 :8080을 붙여서 확인
>   ex) 192.168.8.88:8080 
>       - 이 때 고양이가 있는 아파치 톰겟 웹 페이지가 나오면 정상 구동
>       - 비정상 구동시 systmectl status tomcat8 시 빨갛게 에러 표시
> ** 80포트가 없을 시 추가해야 함
>   1) vi /etc/firewalld/zones/public.xml
>   2) firewall-cmd --permanent --zone=public --add-port=8080/tcp   // 숫자엔 추가할 포트 작성
>   3) firewall-cmd --state 로 구동 확인   
>   4) firewall-cmd --get-active-zones
>   5) firewall-cmd --reload
>   6) firewall-cmd --list-ports
> ```


#### mysql 설치

> ```
> 1. 톰캣 실행파일 폴더로 이동
>   1-1) cd /usr/local/apache-~/bin 
> 2. 톰캣 종료
>   2-1) ./shutdown.sh
> 3. 톰캣 시작
>   3-1) ./start.up
> 4. mysql이 깔려있는지 install list 확인
>   4-1) yum list installed | grep mysql
> 5. 깔려있다면 삭제
>   5-1) rm -rf /var/lib/mysql
> 6.mysql 설치
>   6-1) mysql-community -y
> 7.yum respository 등록
>   7-1) yum install -y https://dev.mysql.com/get/mysql80-community-release-el7-5.noarch.rpm
> 8. yum respository 등록 확인 
>   8-1) yum repolist enabled | grep "mysql.*"
> 9. mysql 설치 
>   9-1) yum install -y mysql-server 
> 10. 설치된 버전 확인
>   10-1) mysqld -V
> 11. 재부팅 해도 sql이 자동 실행되도록 설정
>   11-1) systemctl enable mysqld
> 12. sql 실행 
>   12-1) systemctl start mysqld
> 13. sql 실행 확인
>   13-1) systemctl status mysqld
> 14. 임시 비밀번호 확인
>   14-1) grep "temporary password" /var/log/mysqld.log
> 15. 임시 비밀번호 복사
>   15-1) wjRu))mGi7*d
> 16. mysql root로 접속
>   16-1) mysql -u root -p
> 17. mysql 유저 추가
>   17-1) ALTER USER 'root'@'localhost' IDENTIFIED BY "Wlgh@wldbs48";
> 18. exit로 나가서 비밀번호 바뀐거 확인하기 
>   18-1) exit , mysql -u root -p
> 19. 재 로그인 (비밀번호 없애고 싶다면 구글에 정책(policy) 검색)
>   19-1) Wlgh@wldbs48
> 20. use mysql; 
> 21. select host, user from user;
> 22. 유저 생성
>   22-1) create user 'root'@'192.168.8.88' identified by "Wlgh@wldbs48";
> 23. 모든 db 및 테이블에 접근권한 설정
>   23-1) grant all privileges on *.* to 'root'@'192.168.8.88';
> 24. 구글 공인 아이피 검색 - 내 아이피 주소 확인
>   ex) 117.111.4.164
>   24-1) create user 'root'@'117.111.4.164' identified by "Wlgh@wldbs48";
>   24-2) grant all privileges on *.* to 'root'@'117.111.4.164';
> 25. 설정한 권한 적용 (반드시 해야 적용이 된다.) 
>   25-1) flush privileges;
> 26. 리눅스에서 설정 변경
>   26-1) vi /etc/my.cnf
> 27. 마지막줄에 추가 
>   [client]
>   default-character-set = utf8mb4
>
>   [mysql]
>   default-character-set = utf8mb4
>
>   [mysqld]
>   character-set-client-handshake = FALSE
>   character-set-server = utf8mb4
>   collation-server = utf8mb4_unicode_ci
> 28. utf8 추가 확인
>   28-1) status
> ```

#### apache && tomcat 연동

> ```
> 1. yum -y install gcc gcc-c++ httpd-devel
> 2. wget http://mirror.apache-kr.org/tomcat/tomcat-connectors/jk/tomcat-connectors-1.2.48-src.tar.gz
> 3. cd /usr/local
> 4. ./configure --with-apxs=/usr/bin/apxs
> 5. make && make install
> 6. make && make install이 잘 됐는지 확인
>   6-1) ls /etc/httpd/modules/ | grep mod_jk
> 7. 접근성 등록
>   7-1) vi /etc/httpd/conf/httpd.conf
>       [맨아래추가]
>   LoadModule jk_module modules/mod_jk.so
>   <VirtualHost *:80>
>       ServerName localhost
>       JkMount /* tomcat
>   </VirtualHost>
>
>   <IfModule mod_jk.c>
>       JkWorkersFile conf/workers.properties
>       JkShmFile run/mod_jk.shm
>       JkLogFile logs/mod_jk.log
>       JkLogLevel info
>       JkLogStampFormat "[%a %b %d %H:%M:%S %Y] "
>       JkOptions +ForwardKeySize +ForwardURICompat -ForwardDirectories
>       JkRequestLogFormat "%w %R %V %T %U %q"
>   </IfModule>
>
> 8. vi /usr/local/apache-tomcat-8~
>   116번째 
>   <Connector protocol="AJP/1.3"
>       address="0.0.0.0"
>       secretRequired = "false"
>       port="8009"
>       redirectPort="8443" />
> 
> 9. cd /usr/local/apache-tomcat-8.~/bin/
> 10. ./shutdown.sh
> 11. ./startup.sh
> 12. systemctl restart httpd
> ```
